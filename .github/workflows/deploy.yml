name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 4. Build and push Client Docker image
      - name: Determine Client Version
        run: |
          # Define the base version (major and minor hardcoded)
          BASE_VERSION="v1.2"
      
          echo "Fetching existing tags for the client..."
          EXISTING_TAGS=$(curl -s -u ${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} \
            https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-client/tags | jq -r '.results[].name')
          echo "Existing tags: $EXISTING_TAGS"
      
          # Filter tags matching the base version (e.g., v1.2.x)
          LATEST_VERSION=$(echo "$EXISTING_TAGS" | grep -E "^${BASE_VERSION}\.[0-9]+$" | sort -V | tail -n 1)
          echo "Latest version: $LATEST_VERSION"
      
          # Increment the patch version
          if [[ -z "$LATEST_VERSION" ]]; then
            NEW_VERSION="${BASE_VERSION}.0"
          else
            PATCH=$(echo $LATEST_VERSION | awk -F '.' '{print $NF}')
            NEW_VERSION="${BASE_VERSION}.$((PATCH + 1))"
          fi
          echo "New version: $NEW_VERSION"
      
          # Save the new version for the next step
          echo "NEW_CLIENT_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Build and push Client
        run: |
          echo "Building and pushing client image..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-client:$NEW_CLIENT_VERSION ./client
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-client:$NEW_CLIENT_VERSION

      # 5. Build and push Server Docker image
      - name: Determine Server Version
        run: |
          # Define the base version (major and minor hardcoded)
          BASE_VERSION="v1.2"

          echo "Fetching existing tags for the server..."
          EXISTING_TAGS=$(curl -s -u ${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} \
            https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-server/tags | jq -r '.results[].name')
          echo "Existing tags: $EXISTING_TAGS"

          # Filter tags matching the base version (e.g., v1.2.x)
          LATEST_VERSION=$(echo "$EXISTING_TAGS" | grep -E "^${BASE_VERSION}\.[0-9]+$" | sort -V | tail -n 1)
          echo "Latest version: $LATEST_VERSION"

          # Increment the patch version
          if [[ -z "$LATEST_VERSION" ]]; then
            NEW_VERSION="${BASE_VERSION}.0"
          else
            PATCH=$(echo $LATEST_VERSION | awk -F '.' '{print $NF}')
            NEW_VERSION="${BASE_VERSION}.$((PATCH + 1))"
          fi
          echo "New version: $NEW_VERSION"

          # Save the new version for the next step
          echo "NEW_SERVER_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build and push Server
        run: |
          echo "Building and pushing server image..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-server:$NEW_SERVER_VERSION ./server
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-server:$NEW_SERVER_VERSION

      # 6. Build and push Nginx Docker image
      - name: Build and push Nginx
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-nginx:latest ./nginx
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/onlyfriends-nginx:latest

      # 7. Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e

            # Update package lists
            echo "Updating package lists..."
            sudo apt update

            # Check if Docker is installed
            if ! command -v docker &>/dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            else
              echo "Docker is already installed."
            fi

            # Add the specified AWS username to the Docker group
            echo "Adding ${{ secrets.EC2_USER }} to the Docker group..."
            sudo usermod -aG docker ${{ secrets.EC2_USER }}

            # Check if Docker Compose is installed
            if ! docker compose version &>/dev/null; then
              echo "Docker Compose not found. Installing Docker Compose v2..."
              mkdir -p ~/.docker/cli-plugins/
              curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
              chmod +x ~/.docker/cli-plugins/docker-compose
            else
              echo "Docker Compose is already installed."
            fi

            # Navigate to the deployment directory
            cd ${{ secrets.REMOTE_PATH }}

            # Create/update the .env file with necessary environment variables
            cat <<EOF > .env
            NODE_ENV=production
            VITE_SERVER_URL=http://wvcdev.xyz
            VITE_ALLOWED_IMAGE_DOMAIN=onlyfriends-1.s3.ap-southeast-1.amazonaws.com
            PORT=5000
            APP_ORIGIN=http://wvcdev.xyz
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            RESEND_VERIFIED_DOMAIN=wvcdev.com
            ALLOWED_IMAGE_DOMAIN=onlyfriends-1.s3.ap-southeast-1.amazonaws.com
            AWS_REGION=ap-southeast-1
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_BUCKET_NAME=onlyfriends-1
            EOF

            # Pull the latest Docker images
            docker compose pull

            # Rebuild and restart the containers
            docker compose up -d --build
